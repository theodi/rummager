#!/usr/bin/env ruby

PROJECT_ROOT = File.dirname(__FILE__) + "/../"
DATA_DIR = PROJECT_ROOT + "data/"
LIBRARY_PATH = PROJECT_ROOT + "lib/"

[PROJECT_ROOT, LIBRARY_PATH].each do |path|
  $LOAD_PATH.unshift(path) unless $LOAD_PATH.include?(path)
end

DEFAULT_JSON_URL = "https://www.gov.uk/api/search.json"
require "logging"
require "search_config"
require "slop"
require 'health_check/logging_config'
require 'health_check/search_checker'
require 'health_check/suggestion_checker'
require 'health_check/json_search_client'
require 'health_check/downloader'
require 'health_check/basic_auth_credentials'

class HealthCheckCLI
  attr_reader :opts, :args

  def usage(opts, message = nil)
    puts "#{message}\n\n" if message
    puts opts
  end

  def run!
    health_checker = self
    Slop.parse do
      banner %Q{Usage: #{File.basename(__FILE__)}

    Runs a health check.
    }
      on 'd', 'download', "Download search healthcheck data"
      on 'h', 'help', "Show this message"
      on 'limit=', "Limit to the first n tests", as: Integer
      on 'a', 'auth=', "Basic auth credentials (of the form 'user:pass'", as: HealthCheck::BasicAuthCredentials
      on 'j', 'json=', "Connect to a Rummager unified search endpoint at the the given url (default) (eg. #{DEFAULT_JSON_URL})", default: DEFAULT_JSON_URL
      on 'v', 'verbose', "Show verbose logging output"
      on 'type=', "Which tests to run. 'suggestions' or 'results' (default)"
      run(health_checker)
    end
  end

  def call(opts, args)
    @opts = opts
    @args = args

    if opts.verbose?
      Logging.logger.root.level = :debug
      Logging.logger.root.info "Debug logging enabled"
    end

    if opts.download?
      FileUtils.mkdir_p(DATA_DIR)
      HealthCheck::Downloader.new(data_dir: DATA_DIR).download!
    elsif opts.help?
      usage(opts)
    else
      if opts["type"] == "suggestions"
        run_suggestions_test
      else
        run_search_result_tests
      end
    end
  end

  private

  def run_search_result_tests
    scores = run_search_result_test_on_index
    scores.summarise("Overall score")
  end

  def run_search_result_test_on_index
    check_file_path = DATA_DIR + "search-results.csv"
    check_file = open_file(check_file_path)

    HealthCheck::SearchChecker.new(
      search_client: search_client,
      test_data: check_file
    ).run!
  end

  # Run a health-check on the suggestions in suggestions.csv
  def run_suggestions_test
    check_file = open_file(DATA_DIR + "suggestions.csv")

    calculator = HealthCheck::SuggestionChecker.new(
      search_client: search_client,
      test_data: check_file
    ).run!

    calculator.summarise("Overall score")
  end

  def search_client
    HealthCheck::JsonSearchClient.new(
      base_url: URI.parse(opts["json"]),
      authentication: opts[:auth]
    )
  end

  def open_file(filename)
    file = open(filename)

    # Take the first n + 1 lines (including header row) from the check file
    if opts["limit"]
      file = StringIO.new(file.take(opts['limit'] + 1).join)
    end

    file
  end
end

HealthCheckCLI.new.run!
