#!/usr/bin/env ruby

require "logging"
PROJECT_ROOT = File.dirname(__FILE__) + "/../"
DATA_DIR = PROJECT_ROOT + "data/"

File.join(PROJECT_ROOT, "lib").tap do |path|
  $LOAD_PATH.unshift(path) unless $LOAD_PATH.include?(path)
end

require "search_config"

require "optparse"

options = {index_name: "government"}
OptionParser.new do |opts|
  opts.banner = "Usage: search [options] <search terms>"

  opts.on("-i", "--index INDEX", "Specify index (default: #{options[:index_name]})") do |index|
    options[:index_name] = index
  end

  opts.on("-q", "--show-query", "Dump the query hash as JSON") do
    options[:show_query_hash] = true
  end
end.parse!

def show_result(i, r)
  relevancy_bar = '#' * r.es_score.floor
  puts tabulate([3, 3, 10, 50, 50], [i, r.es_score, relevancy_bar,  r.title, r.link])
end

def show_result_comparison(i, original_result, new_index)
  message = if new_index
    change = i - new_index
    if change == 0
      "="
    elsif change > 0
      "+#{change} (#{new_index})"
    else
      "-#{-change} (#{new_index})"
    end
  else
    "X"
  end
  puts tabulate([3, 3, 80, 10], [i, original_result.es_score, original_result.title, message])
end

def truncate(data, max_length)
  data = data.to_s
  if data.size > max_length
    data[0..(max_length-4)] + "..."
  else
    data
  end
end

def tabulate(col_sizes, data)
  col_sizes.map.with_index do |col_size, i|
    case data[i]
    when Float
      sprintf("%#{col_size}s", data[i].to_s[0..col_size-1])
    else
      truncated = truncate(data[i].to_s, col_size)
      sprintf("%-#{col_size}s", truncated)
    end
  end.join(" ")
end

index = SearchConfig.new.search_server.index(options[:index_name])
query = ARGV.join(" ")
search_options = {
  limit: 1000
}
results = index.search(query, search_options)

if options[:show_query_hash]
  puts "QUERY:"
  puts JSON.pretty_generate(index.search_query(query, search_options))
end

if options[:compare]
  results2 = index.search(query)

  puts "Search 1: #{results.total}"
  puts "Search 2: #{results2.total}"
  if options[:show_query_hash]
    puts "QUERY2:"
    puts JSON.pretty_generate(index.search_query(query, search_options))
  end

  puts tabulate([3, 50, 3, 50], ["sc", "title", "sc", "title"])
  puts tabulate([3, 50, 3, 50], ["===", "=====", "===", "====="])
  results.results[0..50].each.with_index do |r1, i|
    new_index = results2.results.find_index {|r| r1.link == r.link}
    show_result_comparison(i, r1, new_index)
  end

else

  puts "Index: #{options[:index_name]}"
  puts "Query: #{query}"
  puts "Total results: #{results.total}"
  puts

  puts tabulate([3, 3, 10, 50, 50], ["i", "sc", "score", "title", "link"])
  puts tabulate([3, 3, 10, 50, 50], ["===", "===", "=====", "=====", "===="])
  results.results.each.with_index do |r, i|
    show_result(i + 1, r)
  end
end
